// FUN√á√ÉO UNIVERSAL - Detecta QUALQUER profiss√£o (sem limita√ß√µes)
function detectarTipoMensagem(mensagem) {
  console.log('üîç Analisando mensagem:', mensagem);
  
  const mensagemLower = mensagem.toLowerCase();
  
  // Padr√µes que indicam PROFISS√ÉO (sem depender de lista espec√≠fica)
  const padroesProfissao = [
    /^sou\s+/i,
    /^trabalho\s+(como|com|de|na|no)/i,
    /^atuo\s+(como|na|no)/i,
    /^me\s+formei\s+em/i,
    /^formado\s+em/i,
    /^especialista\s+em/i,
    /^profiss√£o/i,
    /^minha\s+(profiss√£o|√°rea)/i,
    /^√°rea\s+de/i,
    /^ramo\s+de/i,
    /^setor\s+de/i,
    /(especializado|especializada)\s+em/i,
    /(focado|focada)\s+em/i
  ];
  
  // Verificar padr√µes de profiss√£o
  const temPadraoProfissao = padroesProfissao.some(padrao => padrao.test(mensagem));
  
  // Verificar palavras que indicam contexto profissional
  const palavrasProfissionais = [
    'cl√≠nica', 'consult√≥rio', 'escrit√≥rio', 'loja', 'sal√£o', 'oficina',
    'est√∫dio', 'ateli√™', 'empresa', 'neg√≥cio', 'servi√ßos', 'atendimento',
    'especialidade', 'especialista', 'profissional', 't√©cnico', 'forma√ß√£o',
    'curso', 'gradua√ß√£o', 'p√≥s', 'mestrado', 'experi√™ncia', 'anos de',
    'cliente', 'paciente', 'p√∫blico', 'mercado', '√°rea', 'setor', 'ramo'
  ];
  
  const temContextoProfissional = palavrasProfissionais.some(palavra => 
    mensagemLower.includes(palavra)
  );
  
  // Se tem padr√£o de profiss√£o OU contexto profissional, √© profiss√£o
  if (temPadraoProfissao || temContextoProfissional) {
    console.log('‚úÖ Detectado: PROFISS√ÉO/ESPECIALIDADE (universal)');
    return {
      tipo: 'profissao',
      temNome: false,
      temProfissao: true,
      dadosExtraidos: extrairProfissaoEspecialidadeUniversal(mensagem)
    };
  }
  
  // Tentar extrair nome
  const nomeExtraido = extrairNomeSeguro(mensagem);
  if (nomeExtraido) {
    console.log('‚úÖ Detectado: NOME ENCONTRADO -', nomeExtraido);
    return {
      tipo: 'nome',
      temNome: true,
      temProfissao: false,
      nome: nomeExtraido
    };
  }
  
  console.log('‚ùì Detectado: MENSAGEM GEN√âRICA');
  return {
    tipo: 'generico',
    temNome: false,
    temProfissao: false
  };
}

// FUN√á√ÉO MELHORADA - Extrai nome SEM limita√ß√µes de profiss√£o
function extrairNomeSeguro(mensagem) {
  // Padr√µes que indicam que a pessoa est√° falando profiss√£o (n√£o nome)
  const padroesProfissao = [
    /sou\s+(.*?)(?:,|\s+e\s+|\s+trabalho|\s+atuo|\s+especialist)/i,
    /trabalho\s+(como|com|de|na|no)/i,
    /formado\s+em/i,
    /especialista\s+em/i,
    /atuo\s+(como|na|no)/i,
    /profiss√£o/i,
    /√°rea\s+de/i
  ];
  
  // Se tem padr√£o de profiss√£o, n√£o extrair nome
  const temPadraoProfissao = padroesProfissao.some(padrao => padrao.test(mensagem));
  if (temPadraoProfissao) {
    return null;
  }
  
  // Padr√µes para nomes limpos
  const padroesNome = [
    /(?:me chamo|meu nome √©|sou |eu sou )\s*([A-Za-z√Ä-√ø\s]{2,30})$/i,
    /^([A-Za-z√Ä-√ø\s]{2,30})$/i // Nome sozinho
  ];
  
  for (const padrao of padroesNome) {
    const match = mensagem.match(padrao);
    if (match) {
      const nomeCandidate = match[1].trim();
      
      // Verificar se tem s√≥ palavras que podem ser nome (sem n√∫meros, sem palavras muito espec√≠ficas)
      if (/^[A-Za-z√Ä-√ø\s]+$/.test(nomeCandidate) && nomeCandidate.split(' ').length <= 4) {
        return nomeCandidate;
      }
    }
  }
  
  return null;
}

// FUN√á√ÉO UNIVERSAL - Extrai QUALQUER profiss√£o e especialidade
function extrairProfissaoEspecialidadeUniversal(mensagem) {
  console.log('üîç Extraindo profiss√£o universal de:', mensagem);
  
  let textoLimpo = mensagem.trim();
  
  // Remover prefixos comuns
  textoLimpo = textoLimpo.replace(/^(sou |trabalho como |atuo como |me formei em |formado em |especialista em |minha profiss√£o √© |trabalho de |trabalho na |trabalho no |√°rea de )/i, '');
  
  // Padr√µes para separar profiss√£o e especialidade
  const separadores = [
    /^(.*?)(?:,\s*|\s+e\s+|\s+-\s+)(?:especialista em |especialidade em |trabalho com |foco em |√°rea de |atuo em |principalmente |focado em |focada em )\s*(.+)/i,
    /^(.*?)(?:,\s*|\s+)(?:especializada? em |com foco em |que trabalha com )\s*(.+)/i,
    /^(.*?)(?:\s*-\s*|\s*,\s*)(.+)/i // Separa√ß√£o simples por h√≠fen ou v√≠rgula
  ];
  
  for (const separador of separadores) {
    const match = textoLimpo.match(separador);
    if (match) {
      const profissao = match[1].trim();
      const especialidade = match[2].trim();
      
      console.log(`‚úÖ Profiss√£o: "${profissao}" | Especialidade: "${especialidade}"`);
      return {
        profissao: profissao,
        especialidade: especialidade
      };
    }
  }
  
  // Se n√£o encontrou separa√ß√£o, usar toda a mensagem como profiss√£o
  console.log(`‚úÖ Profiss√£o √∫nica: "${textoLimpo}"`);
  return {
    profissao: textoLimpo,
    especialidade: 'Geral'
  };
}

// FUN√á√ÉO MELHORADA - Sistema de conversa corrigido
async function processarConversaEtapas(telefone, mensagem) {
  console.log('üß† Processando conversa Luke Stories...');
  
  // Buscar usu√°rio
  let usuario = await buscarUsuario(telefone);
  console.log('üë§ Usu√°rio encontrado:', usuario ? `${usuario.nome || 'Sem nome'} (status: ${usuario.status})` : 'Nenhum');
  
  // Verificar se usu√°rio pagou
  if (!usuario || usuario.status !== 'pago') {
    return `üîí *Acesso restrito!*

Para usar o Luke Stories, voc√™ precisa adquirir o acesso primeiro.

üí≥ *Fa√ßa seu pagamento em:* [LINK DO CHECKOUT TICTO]

Ap√≥s o pagamento, voc√™ receber√° acesso imediato! ‚ú®`;
  }
  
  // Usu√°rio tem perfil completo - pode gerar textos
  if (usuario.nome && usuario.profissao && usuario.especialidade) {
    console.log(`‚úÖ Usu√°rio completo: ${usuario.nome}`);
    
    // Verificar se quer alterar informa√ß√µes
    if (mensagem.toLowerCase().includes('alterar') || mensagem.toLowerCase().includes('mudar') || mensagem.toLowerCase().includes('trocar')) {
      return `Oi ${usuario.nome}! üòä

Quer alterar suas informa√ß√µes?

üìã *Dados atuais:*
üë§ **Nome:** ${usuario.nome}
üíº **Profiss√£o:** ${usuario.profissao}
üéØ **Especialidade:** ${usuario.especialidade}
üè¢ **Empresa:** ${usuario.empresa || 'N√£o informada'}

üîÑ *Me diga o que quer alterar:*
Ex: "Meu nome agora √©...", "Mudei de especialidade para...", etc.`;
    }
    
    // Gerar texto personalizado baseado na solicita√ß√£o
    return await gerarTextoPersonalizado(usuario, mensagem);
  }
  
  // FLUXO DE COLETA DE DADOS - ETAPA POR ETAPA
  
  // ETAPA 1: Coletar NOME primeiro
  if (!usuario.nome) {
    const analise = detectarTipoMensagem(mensagem);
    
    if (analise.temNome) {
      // Nome encontrado - salvar e pedir profiss√£o
      await supabase.from('usuarios')
        .update({ nome: analise.nome })
        .eq('telefone', telefone);
      
      return `Prazer te conhecer, ${analise.nome}! üòä

üéØ *Agora me conte:*
Qual sua **profiss√£o e especialidade**?

üí° *Exemplos:*
üó£Ô∏è "Sou barbeiro, especialista em fade"
üó£Ô∏è "Dentista, trabalho com implantes"
üó£Ô∏è "Nutricionista focada em emagrecimento"

Pode falar do seu jeito! üí¨`;
    } 
    else if (analise.temProfissao) {
      // Pessoa falou profiss√£o mas n√£o nome - pedir nome primeiro
      return `Que legal! Vi que voc√™ √© ${analise.dadosExtraidos.profissao}! üëè

Mas antes, **como gostaria de ser chamado(a)?**

Me diga seu nome para eu te conhecer melhor! üòä

üí¨ *Pode falar:* "Meu nome √©..." ou s√≥ o nome mesmo!`;
    }
    else {
      // Primeira mensagem - pedir nome
      return `üëã *Oi! Sou o Luke Stories!*

Para personalizar meus textos para voc√™, preciso te conhecer melhor.

üéØ *Como gostaria de ser chamado(a)?*

Pode mandar por √°udio ou texto! üòä`;
    }
  }
  
  // ETAPA 2: Coletar PROFISS√ÉO (usu√°rio j√° tem nome)
  if (!usuario.profissao) {
    const analise = detectarTipoMensagem(mensagem);
    
    if (analise.temProfissao) {
      // Profiss√£o encontrada - salvar
      await supabase.from('usuarios')
        .update({ 
          profissao: analise.dadosExtraidos.profissao,
          especialidade: analise.dadosExtraidos.especialidade
        })
        .eq('telefone', telefone);
      
      return `Excelente, ${usuario.nome}! üëè

üìã *Registrei:*
üíº **Profiss√£o:** ${analise.dadosExtraidos.profissao}
üéØ **Especialidade:** ${analise.dadosExtraidos.especialidade}

üè¢ *√öltima pergunta:* Voc√™ tem empresa/neg√≥cio? Qual o nome?

Se n√£o tiver, pode falar "n√£o tenho empresa" üòä`;
    } else {
      // N√£o detectou profiss√£o - pedir novamente
      const exemplos = getExemplosEspecialidade('geral');
      return `${usuario.nome}, preciso saber sua profiss√£o! üíº

üéØ *Me conte:*
Qual sua **profiss√£o e especialidade**?

üí° *Exemplos:*
üó£Ô∏è "Sou barbeiro, especialista em fade"
üó£Ô∏è "Trabalho como dentista com implantes"
üó£Ô∏è "Nutricionista focada em emagrecimento"

Pode falar do seu jeito! üí¨`;
    }
  }
  
  // ETAPA 3: Coletar EMPRESA (usu√°rio j√° tem nome e profiss√£o)
  if (!usuario.empresa) {
    // Salvar empresa e finalizar
    const empresa = mensagem.toLowerCase().includes('n√£o') || mensagem.toLowerCase().includes('nao') ? 
      'Profissional aut√¥nomo' : mensagem.trim();
    
    await supabase.from('usuarios')
      .update({ 
        empresa: empresa,
        status: 'ativo_completo'
      })
      .eq('telefone', telefone);
    
    return `üéâ *Perfeito, ${usuario.nome}!*

Agora tenho tudo que preciso:
üë§ **Nome:** ${usuario.nome}
üíº **Profiss√£o:** ${usuario.profissao}
üéØ **Especialidade:** ${usuario.especialidade}
üè¢ **Empresa:** ${empresa}

üöÄ *AGORA ESTAMOS PRONTOS!*

üí¨ *Como usar:*
üì± "Preciso de um texto animado para gravar em casa"
üõçÔ∏è "Estou no consult√≥rio, quero uma dica sobre [assunto]"
üéØ "Quero algo promocional para meus servi√ßos"

*Pode mandar por √°udio!* üé§

‚ú® *Vamos come√ßar? Me mande sua primeira solicita√ß√£o!* ‚ú®`;
  }
  
  return "Algo deu errado, pode tentar novamente?";
}

// MANTER as outras fun√ß√µes como est√£o:
// - extrairProfissaoEspecialidade (est√° funcionando)
// - gerarTextoPersonalizado (est√° funcionando)  
// - getExemplosEspecialidade (est√° funcionando)
