const express = require('express');
const cors = require('cors');
const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');
const axios = require('axios');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Inicializar Supabase
const supabase = createClient(
  'https://nbcmqhygbbwjmjwajacm.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5iY21xaHlnYmJ3am1qd2FqYWNtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEwNDE4MjgsImV4cCI6MjA2NjYxNzgyOH0.ZOObCiyZD-glxXWp08a-0kBve7aJzAIFcfCOd-38h_Y'
);

// Inicializar OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Middlewares
app.use(cors());
app.use(express.json());

// SISTEMA DE APRENDIZADO - Buscar prefer√™ncias do usu√°rio
async function buscarPreferenciasUsuario(telefone, usuarioId) {
  try {
    const { data: preferencias, error } = await supabase
      .from('prefer√™ncias_do_usu√°rio')
      .select('*')
      .eq('telefone', telefone)
      .single();
    
    if (error && error.code !== 'PGRST116') {
      console.error('‚ùå Erro ao buscar prefer√™ncias:', error);
      return null;
    }
    
    return preferencias;
  } catch (error) {
    console.error('‚ùå Erro ao buscar prefer√™ncias:', error);
    return null;
  }
}

// SISTEMA DE APRENDIZADO - Analisar hist√≥rico e detectar padr√µes
async function analisarHistoricoUsuario(telefone, usuarioId) {
  try {
    console.log('üîç Analisando hist√≥rico do usu√°rio...');
    
    // Buscar √∫ltimas 10 intera√ß√µes
    const { data: conversas, error } = await supabase
      .from('conversas')
      .select('*')
      .eq('telefone', telefone)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (error || !conversas || conversas.length === 0) {
      console.log('üìù Sem hist√≥rico suficiente para an√°lise');
      return null;
    }
    
    console.log(`üìä Analisando ${conversas.length} intera√ß√µes...`);
    
    // An√°lise de padr√µes
    let padroes = {
      tamanho_medio: 0,
      tons_usados: {},
      palavras_frequentes: {},
      call_to_actions: 0,
      mencoes_nome: 0,
      total_palavras: 0
    };
    
    conversas.forEach(conversa => {
      try {
        const resposta = JSON.parse(conversa.resposta_bot || '{}');
        const texto = resposta.texto_para_gravar || '';
        
        if (texto) {
          // An√°lise de tamanho
          const palavras = texto.split(' ').length;
          padroes.total_palavras += palavras;
          
          // Detectar tom (palavras-chave)
          if (texto.includes('animad') || texto.includes('energia')) padroes.tons_usados.animado = (padroes.tons_usados.animado || 0) + 1;
          if (texto.includes('motiva√ß√£o') || texto.includes('objetivo')) padroes.tons_usados.motivacional = (padroes.tons_usados.motivacional || 0) + 1;
          if (texto.includes('profissional') || texto.includes('t√©cnic')) padroes.tons_usados.serio = (padroes.tons_usados.serio || 0) + 1;
          
          // Detectar call-to-action
          if (texto.includes('me chama') || texto.includes('entre em contato') || texto.includes('agende')) {
            padroes.call_to_actions++;
          }
          
          // Detectar men√ß√µes do nome
          if (texto.includes('eu sou') || texto.includes('aqui √©')) {
            padroes.mencoes_nome++;
          }
        }
      } catch (e) {
        console.log('‚ö†Ô∏è Erro ao processar conversa:', e.message);
      }
    });
    
    // Calcular m√©dias e prefer√™ncias
    const totalConversas = conversas.length;
    padroes.tamanho_medio = Math.round(padroes.total_palavras / totalConversas);
    
    // Determinar tom preferido
    const tomMaisUsado = Object.keys(padroes.tons_usados).reduce((a, b) => 
      padroes.tons_usados[a] > padroes.tons_usados[b] ? a : b, 'equilibrado');
    
    // Determinar prefer√™ncias
    const preferenciasDetectadas = {
      tamanho_preferido: padroes.tamanho_medio < 80 ? 'curto' : padroes.tamanho_medio < 150 ? 'm√©dio' : 'longo',
      tom_preferido: tomMaisUsado,
      call_to_action: padroes.call_to_actions > totalConversas * 0.6 ? 'direto' : 'sutil',
      mencao_nome_frequencia: padroes.mencoes_nome > totalConversas * 0.7 ? 'sempre' : '√†s vezes',
      total_textos_gerados: totalConversas,
      ultima_interacao: new Date(),
      padroes_detectados: padroes
    };
    
    console.log('‚úÖ Padr√µes detectados:', preferenciasDetectadas);
    return preferenciasDetectadas;
    
  } catch (error) {
    console.error('‚ùå Erro na an√°lise do hist√≥rico:', error);
    return null;
  }
}

// SISTEMA DE APRENDIZADO - Salvar/atualizar prefer√™ncias
async function salvarPreferenciasUsuario(telefone, usuarioId, preferencias) {
  try {
    console.log('üíæ Salvando prefer√™ncias do usu√°rio...');
    
    // Verificar se j√° existe
    const preferenciasExistentes = await buscarPreferenciasUsuario(telefone, usuarioId);
    
    if (preferenciasExistentes) {
      // Atualizar existente
      const { data, error } = await supabase
        .from('prefer√™ncias_do_usu√°rio')
        .update({
          ...preferencias,
          updated_at: new Date(),
          total_textos_gerados: (preferenciasExistentes.total_textos_gerados || 0) + 1
        })
        .eq('telefone', telefone);
      
      if (error) {
        console.error('‚ùå Erro ao atualizar prefer√™ncias:', error);
        return false;
      }
    } else {
      // Criar novo
      const { data, error } = await supabase
        .from('prefer√™ncias_do_usu√°rio')
        .insert({
          telefone: telefone,
          usuario_id: usuarioId,
          ...preferencias,
          total_textos_gerados: 1,
          created_at: new Date(),
          updated_at: new Date()
        });
      
      if (error) {
        console.error('‚ùå Erro ao criar prefer√™ncias:', error);
        return false;
      }
    }
    
    console.log('‚úÖ Prefer√™ncias salvas com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao salvar prefer√™ncias:', error);
    return false;
  }
}

async function buscarUsuario(telefone) {
  try {
    const { data: usuario, error } = await supabase
      .from('usuarios')
      .select('*')
      .eq('telefone', telefone)
      .single();
    
    if (error && error.code !== 'PGRST116') {
      console.error('‚ùå Erro ao buscar usu√°rio:', error);
      return null;
    }
    
    return usuario;
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rio:', error);
    return null;
  }
}

// NOVA FUN√á√ÉO - Detectar agendamento de conte√∫do
function detectarAgendamento(mensagem, usuario) {
  console.log('üìÖ Analisando se √© agendamento:', mensagem);
  
  const texto = mensagem.toLowerCase();
  
  // Indicadores de agendamento
  const indicadoresAgendamento = [
    'para amanh√£', 'para hoje', 'para segunda', 'para ter√ßa', 'para quarta', 
    'para quinta', 'para sexta', 'para s√°bado', 'para domingo',
    'me lembre', 'lembra de', 'agenda para', 'agendar para',
    '√†s', 'as ', ' h', ':00', ':30', ':15', ':45',
    'manh√£', 'tarde', 'noite', 'madrugada',
    'antes de postar', 'meia hora antes', 'uma hora antes', '30 min antes'
  ];
  
  const temAgendamento = indicadoresAgendamento.some(indicador => texto.includes(indicador));
  
  if (!temAgendamento) {
    return { ehAgendamento: false };
  }
  
  console.log('üìÖ Detectado agendamento!');
  
  // Extrair informa√ß√µes do agendamento
  const agendamento = extrairDadosAgendamento(mensagem);
  
  return {
    ehAgendamento: true,
    ...agendamento
  };
}

// NOVA FUN√á√ÉO - Extrair dados do agendamento
function extrairDadosAgendamento(mensagem) {
  console.log('üìä Extraindo dados do agendamento:', mensagem);
  
  const texto = mensagem.toLowerCase();
  const agora = new Date();
  let dataPostar = new Date();
  let dataLembrete = new Date();
  let contextoTexto = mensagem;
  
  // Detectar quando postar
  if (texto.includes('amanh√£')) {
    dataPostar.setDate(agora.getDate() + 1);
  } else if (texto.includes('hoje')) {
    // Mant√©m data atual
  } else if (texto.includes('segunda')) {
    dataPostar = proximoDiaSemana(1); // Segunda
  } else if (texto.includes('ter√ßa')) {
    dataPostar = proximoDiaSemana(2); // Ter√ßa
  } else if (texto.includes('quarta')) {
    dataPostar = proximoDiaSemana(3); // Quarta
  } else if (texto.includes('quinta')) {
    dataPostar = proximoDiaSemana(4); // Quinta
  } else if (texto.includes('sexta')) {
    dataPostar = proximoDiaSemana(5); // Sexta
  } else if (texto.includes('s√°bado') || texto.includes('sabado')) {
    dataPostar = proximoDiaSemana(6); // S√°bado
  } else if (texto.includes('domingo')) {
    dataPostar = proximoDiaSemana(0); // Domingo
  }
  
  // Detectar hor√°rio para postar
  const regexHorario = /(\d{1,2})(?::(\d{2}))?\s*(?:h|horas?)?(?:\s*da?\s*(manh√£|tarde|noite))?/;
  const matchHorario = texto.match(regexHorario);
  
  if (matchHorario) {
    let hora = parseInt(matchHorario[1]);
    const minuto = parseInt(matchHorario[2] || '0');
    const periodo = matchHorario[3];
    
    // Ajustar hora baseado no per√≠odo
    if (periodo === 'tarde' && hora < 12) {
      hora += 12;
    } else if (periodo === 'noite' && hora < 12) {
      hora += 12;
    } else if (periodo === 'manh√£' && hora === 12) {
      hora = 0;
    }
    
    dataPostar.setHours(hora, minuto, 0, 0);
  } else {
    // Hor√°rio padr√£o se n√£o especificado
    dataPostar.setHours(9, 0, 0, 0);
  }
  
  // Detectar quando lembrar
  dataLembrete = new Date(dataPostar);
  
  if (texto.includes('meia hora antes') || texto.includes('30 min antes')) {
    dataLembrete.setMinutes(dataLembrete.getMinutes() - 30);
  } else if (texto.includes('uma hora antes') || texto.includes('1 hora antes')) {
    dataLembrete.setHours(dataLembrete.getHours() - 1);
  } else if (texto.includes('15 min antes')) {
    dataLembrete.setMinutes(dataLembrete.getMinutes() - 15);
  } else {
    // Padr√£o: 30 minutos antes
    dataLembrete.setMinutes(dataLembrete.getMinutes() - 30);
  }
  
  // Se o lembrete ficou no passado, ajustar
  if (dataLembrete <= agora) {
    dataLembrete = new Date(agora.getTime() + 5 * 60 * 1000); // 5 minutos a partir de agora
  }
  
  console.log(`üìÖ Data para postar: ${dataPostar.toLocaleString('pt-BR')}`);
  console.log(`‚è∞ Data do lembrete: ${dataLembrete.toLocaleString('pt-BR')}`);
  
  return {
    dataPostar: dataPostar,
    dataLembrete: dataLembrete,
    contextoTexto: contextoTexto
  };
}

// FUN√á√ÉO AUXILIAR - Calcular pr√≥ximo dia da semana
function proximoDiaSemana(diaSemana) {
  const hoje = new Date();
  const diasAte = (diaSemana + 7 - hoje.getDay()) % 7;
  const proximoDia = new Date(hoje);
  
  if (diasAte === 0) {
    // Se √© hoje, vai para pr√≥xima semana
    proximoDia.setDate(hoje.getDate() + 7);
  } else {
    proximoDia.setDate(hoje.getDate() + diasAte);
  }
  
  return proximoDia;
}

// NOVA FUN√á√ÉO - Processar agendamento de conte√∫do
async function processarAgendamento(usuario, dadosAgendamento, telefone) {
  try {
    console.log('üìÖ Processando agendamento de conte√∫do...');
    
    // Gerar texto baseado no contexto
    const textoGerado = await gerarTextoParaAgendamento(usuario, dadosAgendamento.contextoTexto);
    
    // Criar t√≠tulo do lembrete
    const dataPostarFormatada = dadosAgendamento.dataPostar.toLocaleString('pt-BR', {
      weekday: 'long',
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    const tituloLembrete = `üí° Lembrete: Postar story ${dataPostarFormatada}`;
    
    // Salvar na tabela de lembretes
    const { data, error } = await supabase
      .from('lembretes_conteudo')
      .insert({
        telefone: telefone,
        usuario_id: usuario.id,
        texto_gerado: textoGerado,
        titulo_lembre: tituloLembrete,
        data_para_postar: dadosAgendamento.dataPostar.toISOString(),
        data_lembrete: dadosAgendamento.dataLembrete.toISOString(),
        enviado: false,
        cancelado: false,
        created_at: new Date(),
        updated_at: new Date()
      })
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå Erro ao salvar agendamento:', error);
      throw error;
    }
    
    console.log('‚úÖ Agendamento salvo com ID:', data.id);
    
    // Salvar no hist√≥rico
    await supabase.from('conversas').insert({
      telefone: telefone,
      usuario_id: usuario.id,
      mensagem_usuario: dadosAgendamento.contextoTexto,
      resposta_bot: JSON.stringify({ agendamento_id: data.id, texto_gerado: textoGerado }),
      tipo_mensagem: 'agendamento_criado',
      created_at: new Date()
    });
    
    const dataLembreteFormatada = dadosAgendamento.dataLembrete.toLocaleString('pt-BR', {
      weekday: 'long',
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    return `üìÖ **AGENDAMENTO CRIADO!**

üì± **TEXTO GERADO:**
"${textoGerado}"

‚è∞ **AGENDADO PARA:**
üìç **Postar:** ${dataPostarFormatada}
üîî **Lembrete:** ${dataLembreteFormatada}

‚úÖ **Pronto!** Vou te lembrar no hor√°rio certo!

üí° *Para cancelar, diga: "cancelar agendamento"*

---
üìã *Para copiar agora:* Mantenha pressionado o texto acima

‚ú® *Precisa de mais alguma coisa?* ‚ú®`;
    
  } catch (error) {
    console.error('‚ùå Erro ao processar agendamento:', error);
    
    return `‚ùå Ops! Tive um problema ao criar seu agendamento.

üí° **Pode tentar:**
üîÑ Reformular o pedido
üìù Ser mais espec√≠fico com data/hora

‚ú® *Exemplo: "Crie texto para amanh√£ √†s 9h, me lembre meia hora antes"*

*Estou aqui para ajudar!* üí™`;
  }
}

// NOVA FUN√á√ÉO - Gerar texto espec√≠fico para agendamento
async function gerarTextoParaAgendamento(usuario, contexto) {
  console.log('üìù Gerando texto para agendamento...');
  
  const prompt = `Voc√™ √© o Luke Stories, assistente para cria√ß√£o de textos para stories.

DADOS DO USU√ÅRIO:
- Nome: ${usuario.nome}
- Profiss√£o: ${usuario.profissao}
- Especialidade: ${usuario.especialidade}
- Empresa: ${usuario.empresa || 'Profissional aut√¥nomo'}

CONTEXTO DO AGENDAMENTO: ${contexto}

INSTRU√á√ïES:
1. Crie um texto din√¢mico e personalizado para story
2. Use o nome da pessoa de forma natural
3. Seja espec√≠fico da √°rea de especialidade quando relevante
4. Use linguagem natural e conversacional
5. Tom profissional mas acess√≠vel
6. Tamanho m√©dio (100-150 palavras)
7. Inclua call-to-action sutil

IMPORTANTE: Retorne APENAS o texto que a pessoa vai gravar, sem explica√ß√µes extras ou formata√ß√£o especial.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 300
    });

    return completion.choices[0].message.content.trim();
  } catch (error) {
    console.error('‚ùå Erro ao gerar texto para agendamento:', error);
    
    // Texto de fallback
    return `Oi, eu sou ${usuario.nome}! Como ${usuario.profissao} especialista em ${usuario.especialidade}, estou aqui para te ajudar com o que voc√™ precisar. ${usuario.empresa !== 'Profissional aut√¥nomo' ? `Aqui na ${usuario.empresa}` : 'No meu trabalho'}, eu fa√ßo quest√£o de dar o meu melhor para voc√™. Vem conversar comigo!`;
  }
}
function analisarMudancaCadastro(mensagem, usuario) {
  console.log('üîç Analisando se √© mudan√ßa de cadastro:', mensagem);
  
  const texto = mensagem.toLowerCase();
  
  // Indicadores de mudan√ßa DEFINITIVA de cadastro
  const indicadoresMudancaDefinitiva = [
    'agora sou', 'agora trabalho como', 'mudei de profiss√£o', 'mudei para',
    'n√£o trabalho mais como', 'deixei de ser', 'virei', 'me tornei',
    'minha nova profiss√£o', 'minha especialidade agora', 'atuo como',
    'mudei minha especialidade', 'n√£o sou mais', 'agora atuo'
  ];
  
  // Indicadores de texto TEMPOR√ÅRIO
  const indicadoresTemporario = [
    'como se eu fosse', 'finge que sou', 'imagina que sou',
    'para esse texto', 's√≥ nesse texto', 'temporariamente',
    'simule que sou', 'pretenda que sou'
  ];
  
  const eMudancaDefinitiva = indicadoresMudancaDefinitiva.some(indicador => texto.includes(indicador));
  const eTemporario = indicadoresTemporario.some(indicador => texto.includes(indicador));
  
  if (eTemporario) {
    console.log('‚úÖ Detectado: mudan√ßa tempor√°ria para texto espec√≠fico');
    return { tipo: 'temporario', novaProfissao: null };
  }
  
  if (eMudancaDefinitiva) {
    console.log('‚ö†Ô∏è Detectado: mudan√ßa DEFINITIVA de cadastro');
    
    // Tentar extrair nova profiss√£o da mensagem
    const novoPerfil = extrairNovoPerfil(mensagem);
    
    return { 
      tipo: 'definitivo', 
      novaProfissao: novoPerfil.profissao,
      novaEspecialidade: novoPerfil.especialidade 
    };
  }
  
  console.log('‚ùå N√£o detectada mudan√ßa de cadastro');
  return { tipo: 'nenhum' };
}

// NOVA FUN√á√ÉO - Extrair novo perfil profissional da mensagem
function extrairNovoPerfil(mensagem) {
  console.log('üîç Extraindo novo perfil de:', mensagem);
  
  // Remover partes irrelevantes da mensagem
  let textoLimpo = mensagem.toLowerCase()
    .replace(/agora sou|agora trabalho como|mudei de profiss√£o para|mudei para|virei|me tornei|n√£o trabalho mais como|deixei de ser/g, '')
    .replace(/minha nova profiss√£o √©|minha especialidade agora √©|atuo como/g, '')
    .trim();
  
  // Tentar extrair profiss√£o e especialidade
  let profissao = textoLimpo;
  let especialidade = 'Geral';
  
  // Buscar padr√µes de especialidade
  const regexEspecialidade = /(.*?)(?:,|\s+)(?:especialista em|especialidade em|focado em|√°rea de|que trabalha com)\s+(.+)/i;
  const match = textoLimpo.match(regexEspecialidade);
  
  if (match) {
    profissao = match[1].trim();
    especialidade = match[2].trim();
  }
  
  // Limpar profiss√£o de palavras extras
  profissao = profissao.replace(/^(sou|trabalho como|atuo como)\s+/i, '').trim();
  
  console.log(`‚úÖ Novo perfil extra√≠do: Profiss√£o: "${profissao}" | Especialidade: "${especialidade}"`);
  
  return {
    profissao: profissao,
    especialidade: especialidade
  };
}

// NOVA FUN√á√ÉO - Processar confirma√ß√£o de mudan√ßa de cadastro
async function processarConfirmacaoMudanca(telefone, mensagem, usuario) {
  console.log('‚ö†Ô∏è Processando confirma√ß√£o de mudan√ßa de cadastro...');
  
  const respostaLower = mensagem.toLowerCase();
  
  if (respostaLower.includes('sim') || respostaLower.includes('confirmo')) {
    console.log('‚úÖ Usu√°rio confirmou mudan√ßa de cadastro');
    
    // Buscar dados da mudan√ßa pendente
    const novaProfissao = usuario.mudanca_profissao_pendente;
    const novaEspecialidade = usuario.mudanca_especialidade_pendente;
    
    // Salvar backup dos dados antigos (para logs)
    const dadosAntigos = {
      profissao_anterior: usuario.profissao,
      especialidade_anterior: usuario.especialidade
    };
    
    // Atualizar cadastro no banco
    await supabase.from('usuarios')
      .update({ 
        profissao: novaProfissao,
        especialidade: novaEspecialidade,
        mudanca_profissao_pendente: null,
        mudanca_especialidade_pendente: null,
        aguardando_confirmacao_mudanca: false,
        updated_at: new Date()
      })
      .eq('telefone', telefone);
    
    // RESETAR PREFER√äNCIAS APRENDIDAS (nova profiss√£o = novos padr√µes)
    console.log('üîÑ Resetando prefer√™ncias aprendidas...');
    await supabase.from('prefer√™ncias_do_usu√°rio')
      .delete()
      .eq('telefone', telefone);
    
    // Log da mudan√ßa
    await supabase.from('conversas').insert({
      telefone: telefone,
      usuario_id: usuario.id,
      mensagem_usuario: `[MUDAN√áA DE CADASTRO CONFIRMADA] ${JSON.stringify(dadosAntigos)} ‚Üí ${novaProfissao}, ${novaEspecialidade}`,
      resposta_bot: JSON.stringify({ mudanca_cadastro: true }),
      tipo_mensagem: 'mudanca_cadastro_confirmada',
      created_at: new Date()
    });
    
    console.log(`‚úÖ Cadastro atualizado: ${novaProfissao} - ${novaEspecialidade}`);
    
    return `‚úÖ **CADASTRO ATUALIZADO COM SUCESSO!**

üîÑ **Altera√ß√µes realizadas:**
üë§ **Nova profiss√£o:** ${novaProfissao}
üéØ **Nova especialidade:** ${novaEspecialidade}

üß† **Sistema resetado:** Vou reaprender suas prefer√™ncias com base na nova profiss√£o!

üöÄ **Agora todos os textos ser√£o criados como ${novaProfissao} especialista em ${novaEspecialidade}!**

üí¨ *O que gostaria de criar primeiro na sua nova √°rea?* ‚ú®`;
    
  } else if (respostaLower.includes('n√£o') || respostaLower.includes('nao') || respostaLower.includes('cancelar')) {
    console.log('‚ùå Usu√°rio cancelou mudan√ßa de cadastro');
    
    // Limpar estado de mudan√ßa pendente
    await supabase.from('usuarios')
      .update({ 
        mudanca_profissao_pendente: null,
        mudanca_especialidade_pendente: null,
        aguardando_confirmacao_mudanca: false,
        updated_at: new Date()
      })
      .eq('telefone', telefone);
    
    return `‚ùå **Mudan√ßa cancelada!**

Seu cadastro permanece como:
üë§ **Profiss√£o:** ${usuario.profissao}
üéØ **Especialidade:** ${usuario.especialidade}

üí¨ *Se era s√≥ para um texto espec√≠fico, pode me pedir:*
*"Crie um texto como se eu fosse [profiss√£o]"*

‚ú® *O que gostaria de criar?* ‚ú®`;
    
  } else {
    // Resposta n√£o clara - pedir confirma√ß√£o novamente
    return `N√£o entendi sua resposta! üòÖ

‚ö†Ô∏è **Para confirmar a mudan√ßa de cadastro:**
‚úÖ *"SIM, confirmo a mudan√ßa"*
‚ùå *"N√ÉO, cancela"* ou *"Era s√≥ para esse texto"*

**Aguardo sua confirma√ß√£o clara!** üôè`;
  }
}
  
  // Indicadores claros de que quer texto novo para gravar
  const indicadoresTextoNovo = [
    'texto para gravar', 'gravar um video', 'gravar um story', 'story novo', 'novo texto',
    'agora quero', 'preciso de um texto', 'quero gravar', 'me ajuda com um texto',
    'story animado', 'texto motivacional', 'gravar em casa', 'gravar no trabalho'
  ];
  
  const querTextoNovo = indicadoresTextoNovo.some(indicador => texto.includes(indicador));
  
  if (querTextoNovo) {
    console.log('‚úÖ Detectado: quer texto novo para gravar');
    return 'texto_novo';
  }
  
  // Se chegou at√© aqui e est√° no modo legenda, provavelmente √© ajuste
  console.log('‚úÖ Detectado: ajuste de legenda');
  return 'ajuste_legenda';
}

// SISTEMA INTELIGENTE - Analisar se √© ajuste de legenda
function analisarSeEhAjusteLegenda(mensagem, usuario) {
  console.log('üß† Analisando se √© ajuste de legenda:', mensagem);
  
  const texto = mensagem.toLowerCase();
  
  // Se n√£o tem modo legenda ativo, definitivamente √© texto novo
  if (!usuario.modo_legenda_ativo || !usuario.ultima_legenda_gerada) {
    return 'texto_novo';
  }
  
  // Verificar se faz mais de 10 minutos que gerou a legenda (timeout)
  if (usuario.timestamp_legenda) {
    const agora = new Date();
    const timestampLegenda = new Date(usuario.timestamp_legenda);
    const minutosDesdeUltimaLegenda = (agora - timestampLegenda) / (1000 * 60);
    
    if (minutosDesdeUltimaLegenda > 10) {
      console.log('‚è∞ Timeout do modo legenda (>10 min)');
      return 'texto_novo';
    }
  }

  // SISTEMA INTELIGENTE - Analisar solicita√ß√£o e decidir se precisa de perguntas
function analisarSolicitacao(solicitacao, usuario) {
  console.log('üß† Analisando solicita√ß√£o:', solicitacao);
  
  const texto = solicitacao.toLowerCase();
  
  // S√ì fazer perguntas se for EXTREMAMENTE vago
  const muitoVago = (
    (texto === 'texto' || texto === 'ideia' || texto === 'algo' || 
     texto === 'story' || texto === 'stories' || texto === 'conteudo' || 
     texto === 'conte√∫do' || texto === 'manda') && 
    texto.length < 20
  );
  
  console.log(`üìä An√°lise: muito_vago=${muitoVago}, tamanho=${texto.length}`);
  
  if (muitoVago) {
    return {
      precisaPerguntas: true,
      tipo: 'muito_vago'
    };
  }
  
  return {
    precisaPerguntas: false,
    tipo: 'gerar_direto'
  };
}
  
  // Indicadores claros de que quer texto novo para gravar
  const indicadoresTextoNovo = [
    'texto para gravar', 'gravar um video', 'gravar um story', 'story novo', 'novo texto',
    'agora quero', 'preciso de um texto', 'quero gravar', 'me ajuda com um texto',
    'story animado', 'texto motivacional', 'gravar em casa', 'gravar no trabalho'
  ];
  
  const querTextoNovo = indicadoresTextoNovo.some(indicador => texto.includes(indicador));
  
  if (querTextoNovo) {
    console.log('‚úÖ Detectado: quer texto novo para gravar');
    return 'texto_novo';
  }
  
  // Se chegou at√© aqui e est√° no modo legenda, provavelmente √© ajuste
  console.log('‚úÖ Detectado: ajuste de legenda');
  return 'ajuste_legenda';
}
  console.log('üß† Analisando solicita√ß√£o:', solicitacao);
  
  const texto = solicitacao.toLowerCase();
  
  // Detectar se a solicita√ß√£o √© muito gen√©rica (precisa de perguntas)
  const palavrasGenericas = [
    'texto', 'ideia', 'algo', 'story', 'stories', 'conteudo', 'conte√∫do',
    'gravar', 'falar', 'postar', 'publicar', 'manh√£', 'tarde', 'noite',
    'segunda', 'ter√ßa', 'quarta', 'quinta', 'sexta', 'sabado', 'domingo',
    'hoje', 'agora', 'criativo', 'legal', 'bacana', 'curta', 'r√°pida',
    'rapidinho', 'simples', 'manda'
  ];
  
  const temGenerico = palavrasGenericas.some(palavra => texto.includes(palavra));
  
  // Detectar se j√° tem contexto espec√≠fico
  const temContextoEspecifico = 
    texto.includes('animado') || texto.includes('s√©rio') || texto.includes('motivacional') ||
    texto.includes('call to action') || texto.includes('chamada') ||
    texto.includes('dica') || texto.includes('tutorial') ||
    texto.includes('promocional') || texto.includes('desconto') ||
    texto.length > 100; // Textos longos geralmente t√™m mais contexto
  
  console.log(`üìä An√°lise: gen√©rico=${temGenerico}, espec√≠fico=${temContextoEspecifico}`);
  
  // Decidir se precisa de perguntas
  if (temGenerico && !temContextoEspecifico) {
    return {
      precisaPerguntas: true,
      tipo: 'generico'
    };
  }
  
  return {
    precisaPerguntas: false,
    tipo: 'completo'
  };
}

// SISTEMA DE PERGUNTAS INTELIGENTES - VERS√ÉO MELHORADA
function gerarPerguntasRefinamento(usuario, solicitacao) {
  console.log('‚ùì Gerando perguntas de refinamento...');
  
  const profissao = usuario.profissao.toLowerCase();
  
  // Verificar se √© solicita√ß√£o ap√≥s algumas horas (perguntas extras)
  const agora = new Date();
  const ultimaInteracao = usuario.updated_at ? new Date(usuario.updated_at) : new Date();
  const horasDesdeUltimaInteracao = (agora - ultimaInteracao) / (1000 * 60 * 60);
  
  if (horasDesdeUltimaInteracao >= 2) {
    // Perguntas mais detalhadas ap√≥s algumas horas
    return `√ìtima ideia, ${usuario.nome}! üéØ

Para criar o texto perfeito para voc√™, me ajuda com algumas informa√ß√µes:

üé≠ **Tom do texto:** Voc√™ quer algo mais animado, motivacional, s√©rio ou descontra√≠do?

üìç **Local:** Vai gravar em casa, no ${getProfessionalLocation(profissao)} ou em outro lugar?

üë• **Seus seguidores:** Como costuma cham√°-los? (Ex: pessoal, galera, amigos, fam√≠lia, ${getProfessionalAudience(profissao)}) Ou prefere n√£o usar um termo espec√≠fico?

üéØ **Foco:** Quer destacar algum ${getServiceType(profissao)} espec√≠fico ou algo mais geral sobre ${usuario.especialidade}?

‚è∞ **Hor√°rio:** √â para gravar agora ou em outro momento do dia?

üí¨ *Pode responder tudo junto ou uma por vez!* üòä`;
  }
  
  // Perguntas b√°sicas para primeira vez ou intera√ß√µes recentes
  return `√ìtima ideia, ${usuario.nome}! üéØ

Para criar o texto perfeito para voc√™, me ajuda com algumas informa√ß√µes:

üé≠ **Tom do texto:** Voc√™ quer algo mais animado, motivacional, s√©rio ou descontra√≠do?

üìç **Local:** Vai gravar em casa, no ${getProfessionalLocation(profissao)} ou em outro lugar?

üéØ **Foco:** Quer destacar algum ${getServiceType(profissao)} espec√≠fico ou algo mais geral sobre ${usuario.especialidade}?

üí¨ *Pode responder tudo junto ou uma por vez!* üòä`;
}

// Fun√ß√µes auxiliares para personaliza√ß√£o por profiss√£o
function getProfessionalLocation(profissao) {
  const locais = {
    'barbeiro': 'barbearia',
    'cabeleireiro': 'sal√£o',
    'dentista': 'consult√≥rio',
    'm√©dico': 'consult√≥rio',
    'nutricionista': 'consult√≥rio',
    'advogado': 'escrit√≥rio',
    'psic√≥logo': 'consult√≥rio',
    'esteticista': 'cl√≠nica',
    'mec√¢nico': 'oficina',
    'professor': 'escola'
  };
  
  return locais[profissao] || 'local de trabalho';
}

function getServiceType(profissao) {
  const servicos = {
    'barbeiro': 'corte ou servi√ßo',
    'cabeleireiro': 'procedimento',
    'dentista': 'tratamento',
    'm√©dico': 'tratamento',
    'nutricionista': 'orienta√ß√£o nutricional',
    'advogado': '√°rea jur√≠dica',
    'psic√≥logo': 'abordagem terap√™utica',
    'esteticista': 'procedimento est√©tico',
    'mec√¢nico': 'servi√ßo automotivo',
    'professor': 'mat√©ria'
  };
  
  return servicos[profissao] || 'servi√ßo';
}

function getProfessionalAudience(profissao) {
  const audiencias = {
    'barbeiro': 'clientes',
    'cabeleireiro': 'clientes',
    'dentista': 'pacientes',
    'm√©dico': 'pacientes',
    'nutricionista': 'pacientes',
    'advogado': 'clientes',
    'psic√≥logo': 'pacientes',
    'esteticista': 'clientes',
    'mec√¢nico': 'clientes',
    'professor': 'alunos'
  };
  
  return audiencias[profissao] || 'clientes';
}

// FUN√á√ÉO PRINCIPAL - Gerar texto personalizado COM SISTEMA INTELIGENTE
async function gerarTextoPersonalizado(usuario, solicitacao) {
  console.log(`üéØ Gerando texto para ${usuario.nome}: ${solicitacao}`);
  
  // ANALISAR SE PRECISA DE PERGUNTAS DE REFINAMENTO
  const analise = analisarSolicitacao(solicitacao, usuario);
  
  if (analise.precisaPerguntas) {
    console.log('‚ùì Solicita√ß√£o precisa de refinamento');
    
    // Salvar estado de "aguardando refinamento"
    await supabase.from('usuarios')
      .update({ 
        aguardando_refinamento: true,
        solicitacao_pendente: solicitacao,
        updated_at: new Date()
      })
      .eq('telefone', usuario.telefone);
    
    // Retornar perguntas de refinamento
    return gerarPerguntasRefinamento(usuario, solicitacao);
  }
  
  // VERIFICAR SE √â RESPOSTA DE REFINAMENTO
  if (usuario.aguardando_refinamento && usuario.solicitacao_pendente) {
    console.log('‚úÖ Processando resposta de refinamento');
    
    // Combinar solicita√ß√£o original + respostas
    const solicitacaoCompleta = `${usuario.solicitacao_pendente}\n\nInforma√ß√µes adicionais: ${solicitacao}`;
    
    // Limpar estado de refinamento
    await supabase.from('usuarios')
      .update({ 
        aguardando_refinamento: false,
        solicitacao_pendente: null,
        updated_at: new Date()
      })
      .eq('telefone', usuario.telefone);
    
    // Gerar texto com informa√ß√µes completas
    return await criarTextoComIA(usuario, solicitacaoCompleta, true);
  }
  
  // GERAR TEXTO DIRETO (j√° tem informa√ß√µes suficientes)
  console.log('üöÄ Gerando texto direto');
  return await criarTextoComIA(usuario, solicitacao, false);
}

// FUN√á√ÉO MANTIDA - Criar texto com IA + APRENDIZADO (TEXTO PARA GRAVAR)
async function criarTextoComIA(usuario, solicitacao, foiRefinado = false) {
  console.log('üß† Criando texto com aprendizado individual...');
  
  // Buscar prefer√™ncias do usu√°rio
  const preferencias = await buscarPreferenciasUsuario(usuario.telefone, usuario.id);
  console.log('üìä Prefer√™ncias encontradas:', preferencias ? 'SIM' : 'N√ÉO');
  
  // Se n√£o tem prefer√™ncias suficientes, analisar hist√≥rico
  let preferenciasParaUsar = preferencias;
  if (!preferencias || (preferencias.total_textos_gerados || 0) < 3) {
    console.log('üîç Analisando hist√≥rico para detectar padr√µes...');
    const padroes = await analisarHistoricoUsuario(usuario.telefone, usuario.id);
    
    if (padroes) {
      // Salvar padr√µes detectados
      await salvarPreferenciasUsuario(usuario.telefone, usuario.id, padroes);
      preferenciasParaUsar = padroes;
    }
  }
  
  // Construir prompt personalizado com aprendizado
  let promptPersonalizado = `Voc√™ √© o Luke Stories, assistente pessoal para cria√ß√£o de textos para stories e conte√∫do.

DADOS DO USU√ÅRIO:
- Nome: ${usuario.nome}
- Profiss√£o: ${usuario.profissao}
- Especialidade: ${usuario.especialidade}
- Empresa: ${usuario.empresa || 'Profissional aut√¥nomo'}

SOLICITA√á√ÉO${foiRefinado ? ' (COM REFINAMENTO)' : ''}: ${solicitacao}`;

  // Adicionar prefer√™ncias ao prompt se dispon√≠vel
  if (preferenciasParaUsar) {
    promptPersonalizado += `

PREFER√äNCIAS APRENDIDAS DO USU√ÅRIO:
- Tamanho preferido: ${preferenciasParaUsar.tamanho_preferido || 'm√©dio'} (${preferenciasParaUsar.tamanho_preferido === 'curto' ? '60-100 palavras' : preferenciasParaUsar.tamanho_preferido === 'm√©dio' ? '100-150 palavras' : '150-200 palavras'})
- Tom preferido: ${preferenciasParaUsar.tom_preferido || 'equilibrado'}
- Call-to-action: ${preferenciasParaUsar.call_to_action || 'sutil'}
- Men√ß√£o do nome: ${preferenciasParaUsar.mencao_nome_frequencia || '√†s vezes'}
- Forma de chamar seguidores: ${preferenciasParaUsar.forma_chamar_seguidores || 'pessoal'}
- N√≠vel t√©cnico: ${preferenciasParaUsar.nivel_tecnico || 'intermedi√°rio'}

IMPORTANTE: Use essas prefer√™ncias como base, mas adapte conforme a solicita√ß√£o espec√≠fica.`;
  }

  promptPersonalizado += `

INSTRU√á√ïES AVAN√áADAS:
1. Crie um texto din√¢mico e personalizado${preferenciasParaUsar ? ' seguindo as prefer√™ncias aprendidas' : ''}
2. Use o nome da pessoa de forma natural
3. Adapte PERFEITAMENTE ao tom solicitado (ou preferido se n√£o especificado)
4. Se foi refinado, use TODAS as informa√ß√µes fornecidas pelo usu√°rio
5. Inclua call-to-action adequado conforme prefer√™ncia
6. Seja espec√≠fico da √°rea de especialidade quando relevante
7. Use linguagem natural e conversacional
8. Se for sobre assunto espec√≠fico, seja criativo e educativo

FORMATO DA RESPOSTA:
{
  "texto_para_gravar": "texto que o usu√°rio vai gravar",
  "dicas_gravacao": "dicas espec√≠ficas de como gravar (tom, gestos, express√£o)",
  "observacoes": "observa√ß√µes extras sobre o texto criado"
}

Responda APENAS com o JSON v√°lido.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: promptPersonalizado }],
      max_tokens: 500
    });

    const resultado = JSON.parse(completion.choices[0].message.content);
    
    // Salvar intera√ß√£o no hist√≥rico
    await supabase.from('conversas').insert({
      telefone: usuario.telefone,
      usuario_id: usuario.id,
      mensagem_usuario: solicitacao,
      resposta_bot: JSON.stringify(resultado),
      tipo_mensagem: foiRefinado ? 'texto_refinado' : 'texto_direto',
      created_at: new Date()
    });
    
    // Atualizar contador de textos gerados
    if (preferenciasParaUsar) {
      await salvarPreferenciasUsuario(usuario.telefone, usuario.id, {
        ...preferenciasParaUsar,
        ultima_interacao: new Date()
      });
    }
    
    // RETORNO ESPEC√çFICO PARA TEXTO DE STORY
    // RETORNO ESPEC√çFICO PARA TEXTO DE STORY
    return `üì± **TEXTO PARA GRAVAR:**
"${resultado.texto_para_gravar}"

üé≠ **DICAS DE GRAVA√á√ÉO:**
${resultado.dicas_gravacao}

üí° **OBSERVA√á√ïES:**
${resultado.observacoes}

---
üìã *Para copiar:* Mantenha pressionado o texto acima

‚ú® *Precisa de outro texto ou ajustes? S√≥ me falar!* ‚ú®`;

  } catch (error) {
    console.error('‚ùå Erro ao gerar texto personalizado:', error);
    
    return `üì± **TEXTO PARA GRAVAR:**
"Oi, eu sou ${usuario.nome}! Como ${usuario.profissao} especialista em ${usuario.especialidade}, estou aqui para te ajudar com o que voc√™ precisar. ${usuario.empresa !== 'Profissional aut√¥nomo' ? `Aqui na ${usuario.empresa}` : 'No meu trabalho'}, eu fa√ßo quest√£o de dar o meu melhor para voc√™. Vem conversar comigo!"

üé≠ **DICA:** Grave com energia e sorria!

üí° **OBSERVA√á√ÉO:** Texto b√°sico gerado por erro no sistema.

---
‚ú® *Precisa de outro texto? S√≥ me falar!* ‚ú®`;
  }
}

// Sistema de conversa por etapas - VERS√ÉO LUKE STORIES
async function processarConversaEtapas(telefone, mensagem) {
  console.log('üß† Processando conversa Luke Stories...');
  
  // Buscar usu√°rio
  let usuario = await buscarUsuario(telefone);
  console.log('üë§ Usu√°rio encontrado:', usuario ? `${usuario.nome || 'Sem nome'} (status: ${usuario.status})` : 'Nenhum');
  
  // Verificar se usu√°rio pagou
  if (!usuario || usuario.status !== 'pago') {
    return `üîí *Acesso restrito!*

Para usar o Luke Stories, voc√™ precisa adquirir o acesso primeiro.

üí≥ *Fa√ßa seu pagamento em:* 
https://payment.ticto.app/O6D37000C

Ap√≥s o pagamento, voc√™ receber√° acesso imediato! ‚ú®`;
  }
  
  // Usu√°rio tem perfil completo
  if (usuario.nome && usuario.profissao && usuario.especialidade) {
    console.log(`‚úÖ Usu√°rio completo: ${usuario.nome}`);
    
    // Verificar se tem imagem pendente para processar
    if (usuario.aguardando_confirmacao_imagem && usuario.imagem_pendente) {
      console.log('üì∏ Processando confirma√ß√£o de imagem...');
      
      const respostaLower = mensagem.toLowerCase();
      
      if (respostaLower.includes('sim') || respostaLower.includes('crie') || respostaLower.includes('legenda')) {
        // Usuario quer legenda - processar imagem
        console.log('‚úÖ Usu√°rio confirmou cria√ß√£o de legenda');
        
        // Limpar estado de imagem pendente
        await supabase.from('usuarios')
          .update({ 
            aguardando_confirmacao_imagem: false,
            imagem_pendente: null,
            updated_at: new Date()
          })
          .eq('telefone', telefone);
        
        // Processar imagem com contexto adicional - SEMPRE usar o contexto da mensagem
        const contextoAdicional = `\n\nContexto espec√≠fico solicitado: ${mensagem}`;
        
        return await processarImagem(usuario.imagem_pendente, telefone, contextoAdicional);
      } 
      else if (respostaLower.includes('n√£o') || respostaLower.includes('nao') || respostaLower.includes('n√£o precisa')) {
        // Usuario n√£o quer legenda
        console.log('‚ùå Usu√°rio n√£o quer legenda');
        
        // Limpar estado de imagem pendente
        await supabase.from('usuarios')
          .update({ 
            aguardando_confirmacao_imagem: false,
            imagem_pendente: null,
            updated_at: new Date()
          })
          .eq('telefone', telefone);
        
        return `Entendido! üòä

Sua foto foi ignorada. 

üí¨ **Posso ajudar com:**
üìù Criar textos para stories
üé§ Ideias para grava√ß√µes
üì∏ Legendas para fotos (quando quiser)

O que gostaria de criar hoje? ‚ú®`;
      }
      else {
        // Resposta n√£o clara - pedir confirma√ß√£o novamente
        return `N√£o entendi bem sua resposta! üòÖ

üì∏ **Para sua foto, voc√™ quer:**
‚úÖ *"Sim, crie uma legenda"* 
‚ùå *"N√£o precisa"*
üéØ *"Quero legenda sobre [assunto espec√≠fico]"*

Me diga claramente o que prefere! üòä`;
      }
    }
    
    // NOVO: Verificar se est√° aguardando confirma√ß√£o de mudan√ßa de cadastro
    if (usuario.aguardando_confirmacao_mudanca) {
      console.log('‚ö†Ô∏è Processando confirma√ß√£o de mudan√ßa de cadastro...');
      return await processarConfirmacaoMudanca(telefone, mensagem, usuario);
    }
    
    // NOVO: Verificar se √© mudan√ßa de cadastro
    const analiseMudanca = analisarMudancaCadastro(mensagem, usuario);
    
    if (analiseMudanca.tipo === 'definitivo') {
      console.log('‚ö†Ô∏è Detectada mudan√ßa DEFINITIVA de cadastro');
      
      // Salvar dados da mudan√ßa pendente
      await supabase.from('usuarios')
        .update({ 
          mudanca_profissao_pendente: analiseMudanca.novaProfissao,
          mudanca_especialidade_pendente: analiseMudanca.novaEspecialidade,
          aguardando_confirmacao_mudanca: true,
          updated_at: new Date()
        })
        .eq('telefone', telefone);
      
      // Enviar alerta de confirma√ß√£o
      return `‚ö†Ô∏è **ATEN√á√ÉO - MUDAN√áA DE CADASTRO**

üîç **Detectei que voc√™ quer alterar seu cadastro permanentemente:**

üìã **DADOS ATUAIS:**
üë§ **Profiss√£o atual:** ${usuario.profissao}
üéØ **Especialidade atual:** ${usuario.especialidade}

üîÑ **NOVA INFORMA√á√ÉO DETECTADA:**
üë§ **Nova profiss√£o:** ${analiseMudanca.novaProfissao}
üéØ **Nova especialidade:** ${analiseMudanca.novaEspecialidade}

‚ö†Ô∏è **IMPORTANTE:** Esta mudan√ßa afetar√° TODOS os seus textos futuros!
üîÑ **Suas prefer√™ncias aprendidas ser√£o resetadas** para reaprender com a nova profiss√£o.

**Para confirmar:**
‚úÖ **"SIM, confirmo a mudan√ßa"** - Alterar cadastro permanentemente
‚ùå **"N√ÉO, era s√≥ para esse texto"** - Manter cadastro atual

üí≠ *Se quiser apenas um texto espec√≠fico como outra profiss√£o, diga: "crie um texto como se eu fosse [profiss√£o]"*

**Aguardo sua confirma√ß√£o!** üôè`;
    }
    
    if (analiseMudanca.tipo === 'temporario') {
      console.log('‚úÖ Detectada mudan√ßa tempor√°ria - seguindo para gera√ß√£o normal');
      // Continua o fluxo normal, mas com contexto tempor√°rio
    }
    if (usuario.modo_legenda_ativo && usuario.ultima_legenda_gerada) {
      console.log('üì∏ Usu√°rio est√° no modo legenda, analisando inten√ß√£o...');
      
      const tipoSolicitacao = analisarSeEhAjusteLegenda(mensagem, usuario);
      
      if (tipoSolicitacao === 'ajuste_legenda') {
        console.log('‚úÖ Detectado: ajuste de legenda');
        
        // Processar ajuste de legenda (sem imagem, mas com contexto da legenda anterior)
        const contextoAjuste = `Legenda anterior gerada: "${usuario.ultima_legenda_gerada}"

Solicita√ß√£o de ajuste: ${mensagem}`;
        
        return await processarAjusteLegenda(usuario, contextoAjuste, telefone);
      } else {
        console.log('‚úÖ Detectado: quer texto novo para gravar');
        
        // Limpar modo legenda e processar como texto normal
        await supabase.from('usuarios')
          .update({ 
            modo_legenda_ativo: false,
            ultima_legenda_gerada: null,
            timestamp_legenda: null,
            updated_at: new Date()
          })
          .eq('telefone', telefone);
        
        // Continuar para gera√ß√£o de texto normal
      }
    }
    
    // Verificar se quer alterar informa√ß√µes
    if (mensagem.toLowerCase().includes('alterar') || mensagem.toLowerCase().includes('mudar') || mensagem.toLowerCase().includes('trocar')) {
      return `Oi ${usuario.nome}! üòä

Quer alterar suas informa√ß√µes?

üìã *Dados atuais:*
üë§ **Nome:** ${usuario.nome}
üíº **Profiss√£o:** ${usuario.profissao}
üéØ **Especialidade:** ${usuario.especialidade}
üè¢ **Empresa:** ${usuario.empresa || 'N√£o informada'}

üîÑ *Me diga o que quer alterar:*
Ex: "Meu nome agora √©...", "Mudei de especialidade para...", etc.`;
    }
    
    // Verificar se √© sauda√ß√£o simples (sem solicita√ß√£o espec√≠fica)
    const saudacoesSimples = ['oi', 'ol√°', 'ola', 'hey', 'hi', 'bom dia', 'boa tarde', 'boa noite'];
    const eSaudacao = saudacoesSimples.some(saudacao => 
      mensagem.toLowerCase().trim() === saudacao || 
      mensagem.toLowerCase().trim() === saudacao + '!'
    );
    
    if (eSaudacao) {
      return `Oi ${usuario.nome}! üòä

Sou o Luke Stories, seu assistente para criar textos incr√≠veis! 

Como ${usuario.profissao} especialista em ${usuario.especialidade}, posso te ajudar a criar conte√∫dos personalizados para seus stories e redes sociais.

üí¨ *Me diga o que precisa:*
üì± "Quero um texto para gravar hoje"
üéØ "Preciso de uma dica sobre [assunto]"
‚ú® "Ideia para story de [situa√ß√£o]"
üì∏ "Envie uma foto para eu criar legenda"

*Pode mandar por √°udio tamb√©m!* üé§

O que voc√™ gostaria de criar hoje? üöÄ`;
    }
    
    // SEMPRE analisar a solicita√ß√£o, mesmo para usu√°rios completos
    return await gerarTextoPersonalizado(usuario, mensagem);
  }
  
  // Usu√°rio incompleto - coletar dados por etapas
  if (!usuario.nome) {
    // Tentar extrair nome da mensagem
    const nomeExtraido = extrairNome(mensagem);
    
    if (nomeExtraido) {
      await supabase.from('usuarios')
        .update({ nome: nomeExtraido })
        .eq('telefone', telefone);
      
      return `Prazer te conhecer, ${nomeExtraido}! üòä

üéØ *Agora me conte:*
Qual sua **profiss√£o e especialidade**?

üí° *Pode ser qualquer √°rea:*
üó£Ô∏è "Sou [sua profiss√£o], especialista em [especialidade]"
üó£Ô∏è "Trabalho como [profiss√£o] focado em [√°rea]"
üó£Ô∏è "Atuo na √°rea de [sua profiss√£o]"

Pode falar do seu jeito! üí¨`;
    }
    
    return `üëã *Oi! Sou o Luke Stories!*

Para personalizar meus textos para voc√™, preciso te conhecer melhor.

üéØ *Como gostaria de ser chamado(a)?*

Pode mandar por √°udio ou texto! üòä`;
  }
  
  if (!usuario.profissao) {
    // Extrair profiss√£o e especialidade
    const dadosProfissionais = extrairProfissaoEspecialidade(mensagem);
    
    await supabase.from('usuarios')
      .update({ 
        profissao: dadosProfissionais.profissao,
        especialidade: dadosProfissionais.especialidade
      })
      .eq('telefone', telefone);
    
    return `Excelente, ${usuario.nome}! üëè

üìã *Registrei:*
üíº **Profiss√£o:** ${dadosProfissionais.profissao}
üéØ **Especialidade:** ${dadosProfissionais.especialidade}

üè¢ *√öltima pergunta:* Voc√™ tem empresa/neg√≥cio? Qual o nome?

Se n√£o tiver, pode falar "n√£o tenho empresa" üòä`;
  }
  
  if (!usuario.empresa) {
    // Salvar empresa
    const empresa = mensagem.toLowerCase().includes('n√£o') || mensagem.toLowerCase().includes('nao') ? 
      'Profissional aut√¥nomo' : mensagem.trim();
    
    await supabase.from('usuarios')
      .update({ 
        empresa: empresa,
        configuracao_completa: true
      })
      .eq('telefone', telefone);
    
    return `üéâ *Perfeito, ${usuario.nome}!*

Agora tenho tudo que preciso:
üë§ **Nome:** ${usuario.nome}
üíº **Profiss√£o:** ${usuario.profissao}
üéØ **Especialidade:** ${usuario.especialidade}
üè¢ **Empresa:** ${empresa}

üöÄ *AGORA ESTAMOS PRONTOS!*

üí¨ *Como usar:*
üì± "Preciso de um texto animado para gravar em casa"
üõçÔ∏è "Estou no consult√≥rio, quero uma dica sobre [assunto]"
üéØ "Quero algo promocional para meus servi√ßos"

*Pode mandar por √°udio!* üé§

‚ú® *Vamos come√ßar? Me mande sua primeira solicita√ß√£o!* ‚ú®`;
  }
  
  return "Algo deu errado, pode tentar novamente?";
}

// FUN√á√ÉO CORRIGIDA - Extrair nome sem confundir com profiss√£o
function extrairNome(mensagem) {
  console.log('üîç Extraindo nome de:', mensagem);
  
  // Se mensagem come√ßa com padr√µes de profiss√£o, N√ÉO extrair nome
  const padroesProfissao = [
    /^sou\s+[a-zA-Z√Ä-√ø]+/i,
    /^trabalho\s+(como|com|de)/i,
    /^atuo\s+(como|na|no)/i,
    /^formado\s+em/i,
    /especialista\s+em/i,
    /^minha\s+profiss√£o/i,
    /^√°rea\s+de/i
  ];
  
  // Verificar se √© profiss√£o
  const eProfissao = padroesProfissao.some(padrao => padrao.test(mensagem));
  if (eProfissao) {
    console.log('‚ùå Detectado como profiss√£o, n√£o extraindo nome');
    return null;
  }
  
  // Padr√µes para nomes (sua l√≥gica original mantida)
  const padroes = [
    /(?:me chamo|meu nome √©|sou |eu sou )\s*([A-Za-z√Ä-√ø\s]{2,30})$/i,
    /^([A-Za-z√Ä-√ø\s]{2,30})$/i // Nome sozinho
  ];
  
  for (const padrao of padroes) {
    const match = mensagem.match(padrao);
    if (match && !mensagem.toLowerCase().includes('profiss') && !mensagem.toLowerCase().includes('trabalho')) {
      const nome = match[1].trim();
      console.log('‚úÖ Nome extra√≠do:', nome);
      return nome;
    }
  }
  
  console.log('‚ùå Nenhum nome encontrado');
  return null;
}

// FUN√á√ÉO MELHORADA - Extrair profiss√£o e especialidade universal
function extrairProfissaoEspecialidade(mensagem) {
  console.log('üîç Extraindo profiss√£o de:', mensagem);
  
  let profissao = mensagem;
  let especialidade = null;
  
  // Remover prefixos comuns
  profissao = profissao.replace(/^(sou |trabalho como |atuo como |me formei em |formado em |especialista em |√°rea de )/i, '');
  
  // Buscar padr√µes de especialidade
  const regexEspecialidade = /(.*?)(?:,|\s+)(?:especialista em|especialidade em|trabalho com|foco em|√°rea de|focado em|focada em|especializado em|especializada em|que trabalha com)\s+(.+)/i;
  const match = mensagem.match(regexEspecialidade);
  
  if (match) {
    profissao = match[1].trim();
    especialidade = match[2].trim();
  } else {
    // Se n√£o tem especialidade clara, usar "Geral"
    especialidade = 'Geral';
  }
  
  console.log(`‚úÖ Profiss√£o: "${profissao}" | Especialidade: "${especialidade}"`);
  
  return {
    profissao: profissao,
    especialidade: especialidade
  };
}

// FUN√á√ÉO ATUALIZADA - Processar imagem (APENAS LEGENDA)
async function processarImagem(imageUrl, telefone, contextoAdicional = '') {
  try {
    console.log('üì∏ Baixando imagem:', imageUrl);
    console.log('üïê In√≠cio download:', new Date().toISOString());
    
    const imageResponse = await axios.get(imageUrl, {
      responseType: 'arraybuffer',
      timeout: 15000
    });
    
    console.log('‚úÖ Imagem baixada!');
    console.log('üìä Tamanho do arquivo:', imageResponse.data.byteLength, 'bytes');
    
    // Converter para base64
    const base64Image = Buffer.from(imageResponse.data).toString('base64');
    const dataUrl = `data:image/jpeg;base64,${base64Image}`;
    
    console.log('üïê Fim download:', new Date().toISOString());
    console.log('‚úÖ Imagem convertida para base64');
    
    // Buscar usu√°rio para personalizar an√°lise
    const usuario = await buscarUsuario(telefone);
    if (!usuario) {
      return "‚ùå Erro ao processar imagem. Usu√°rio n√£o encontrado.";
    }
    
    // Buscar prefer√™ncias para personalizar legenda
    const preferencias = await buscarPreferenciasUsuario(telefone, usuario.id);
    
    console.log('üì∏ Enviando para GPT-4 Vision...');
    console.log('üïê In√≠cio Vision:', new Date().toISOString());
    
    const prompt = `Voc√™ √© o Luke Stories, especialista em criar legendas para ${usuario.profissao}.

DADOS DO USU√ÅRIO:
- Nome: ${usuario.nome}
- Profiss√£o: ${usuario.profissao}
- Especialidade: ${usuario.especialidade}
- Empresa: ${usuario.empresa || 'Profissional aut√¥nomo'}

${preferencias ? `PREFER√äNCIAS APRENDIDAS:
- Tom preferido: ${preferencias.tom_preferido || 'equilibrado'}
- Tamanho: ${preferencias.tamanho_preferido || 'm√©dio'}
- Call-to-action: ${preferencias.call_to_action || 'sutil'}
- Forma de chamar seguidores: ${preferencias.forma_chamar_seguidores || 'pessoal'}` : ''}

${contextoAdicional ? `CONTEXTO ESPEC√çFICO SOLICITADO: ${contextoAdicional}` : ''}

INSTRU√á√ïES PARA LEGENDA:
1. Analise a imagem profissionalmente no contexto de ${usuario.profissao}
2. Crie uma legenda criativa e envolvente
3. Use o tom ${preferencias?.tom_preferido || 'profissional mas acess√≠vel'}
4. Tamanho ${preferencias?.tamanho_preferido || 'm√©dio'} (80-120 palavras)
5. Inclua call-to-action ${preferencias?.call_to_action || 'sutil'}
6. Seja espec√≠fico para a √°rea de ${usuario.especialidade}
7. Use linguagem natural e envolvente

IMPORTANTE: Retorne APENAS a legenda pronta para postar, sem explica√ß√µes extras.

Responda APENAS com a legenda, sem JSON ou formata√ß√£o especial.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: prompt
            },
            {
              type: "image_url",
              image_url: {
                url: dataUrl
              }
            }
          ]
        }
      ],
      max_tokens: 300
    });

    console.log('üïê Fim Vision:', new Date().toISOString());
    console.log('‚úÖ An√°lise da imagem conclu√≠da');

    const legenda = completion.choices[0].message.content.trim();
    
    // Salvar intera√ß√£o no hist√≥rico
    await supabase.from('conversas').insert({
      telefone: usuario.telefone,
      usuario_id: usuario.id,
      mensagem_usuario: '[IMAGEM ANALISADA]',
      resposta_bot: JSON.stringify({ legenda_para_postar: legenda }),
      tipo_mensagem: 'legenda_imagem',
      created_at: new Date()
    });
    
    // Atualizar prefer√™ncias se existir
    if (preferencias) {
      await salvarPreferenciasUsuario(telefone, usuario.id, {
        ...preferencias,
        ultima_interacao: new Date()
      });
    }
    
   // ATIVAR MODO LEGENDA ap√≥s gerar legenda
    await supabase.from('usuarios')
      .update({ 
        modo_legenda_ativo: true,
        ultima_legenda_gerada: legenda,
        timestamp_legenda: new Date(),
        updated_at: new Date()
      })
      .eq('telefone', telefone);
    
    console.log('‚úÖ Modo legenda ativado para ajustes futuros');
    
    // RETORNO CORRETO PARA LEGENDA (N√ÉO "TEXTO PARA GRAVAR")
    return `üì∏ **LEGENDA PARA ESSA IMAGEM:**

"${legenda}"

---
üìã *Para copiar:* Mantenha pressionado o texto acima

‚ú® *Precisa de ajustes na legenda? S√≥ me falar!* ‚ú®`;

  } catch (error) {
    console.log('üïê Erro em:', new Date().toISOString());
    console.error('‚ùå Erro detalhado:', {
      message: error.message,
      code: error.code,
      status: error.status
    });
    
    return `‚ùå Ops! Tive um problema ao analisar sua imagem.

üí° **Pode tentar:**
üîÑ Enviar a imagem novamente
üìù Ou me contar o que tem na foto que eu crio uma legenda

‚ú® *Estou aqui para ajudar!* ‚ú®`;
  }
}

// NOVA FUN√á√ÉO - Processar ajuste de legenda
async function processarAjusteLegenda(usuario, contextoAjuste, telefone) {
  try {
    console.log('üîÑ Processando ajuste de legenda...');
    
    // Buscar prefer√™ncias para personalizar ajuste
    const preferencias = await buscarPreferenciasUsuario(telefone, usuario.id);
    
    const prompt = `Voc√™ √© o Luke Stories, especialista em ajustar legendas para ${usuario.profissao}.

DADOS DO USU√ÅRIO:
- Nome: ${usuario.nome}
- Profiss√£o: ${usuario.profissao}
- Especialidade: ${usuario.especialidade}
- Empresa: ${usuario.empresa || 'Profissional aut√¥nomo'}

${preferencias ? `PREFER√äNCIAS APRENDIDAS:
- Tom preferido: ${preferencias.tom_preferido || 'equilibrado'}
- Tamanho: ${preferencias.tamanho_preferido || 'm√©dio'}
- Call-to-action: ${preferencias.call_to_action || 'sutil'}
- Forma de chamar seguidores: ${preferencias.forma_chamar_seguidores || 'pessoal'}` : ''}

CONTEXTO DO AJUSTE:
${contextoAjuste}

INSTRU√á√ïES PARA AJUSTE:
1. Analise a legenda anterior e a solicita√ß√£o de ajuste
2. Fa√ßa EXATAMENTE o que o usu√°rio pediu (diminuir, aumentar, mudar tom, etc.)
3. Mantenha a ess√™ncia da legenda original
4. Use as prefer√™ncias do usu√°rio como base
5. Seja espec√≠fico para a √°rea de ${usuario.especialidade}
6. Use linguagem natural e envolvente

IMPORTANTE: Retorne APENAS a legenda ajustada, sem explica√ß√µes extras.

Responda APENAS com a nova legenda ajustada, sem JSON ou formata√ß√£o especial.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 300
    });

    const legendaAjustada = completion.choices[0].message.content.trim();
    
    // Salvar intera√ß√£o no hist√≥rico
    await supabase.from('conversas').insert({
      telefone: usuario.telefone,
      usuario_id: usuario.id,
      mensagem_usuario: contextoAjuste,
      resposta_bot: JSON.stringify({ legenda_ajustada: legendaAjustada }),
      tipo_mensagem: 'ajuste_legenda',
      created_at: new Date()
    });
    
    // Atualizar a √∫ltima legenda gerada com a nova vers√£o
    await supabase.from('usuarios')
      .update({ 
        ultima_legenda_gerada: legendaAjustada,
        timestamp_legenda: new Date(),
        updated_at: new Date()
      })
      .eq('telefone', telefone);
    
  // Atualizar prefer√™ncias se existir
    if (preferencias) {
      await salvarPreferenciasUsuario(telefone, usuario.id, {
        ...preferencias,
        ultima_interacao: new Date()
      });
    }
    
    console.log('‚úÖ Legenda ajustada com sucesso');
    
    // RETORNO CORRETO PARA LEGENDA AJUSTADA
    return `üì∏ **LEGENDA PARA ESSA IMAGEM:**

"${legendaAjustada}"

---
üìã *Para copiar:* Mantenha pressionado o texto acima

‚ú® *Precisa de mais ajustes? S√≥ me falar!* ‚ú®`;

  } catch (error) {
    console.error('‚ùå Erro ao ajustar legenda:', error);
    
    return `‚ùå Ops! Tive um problema ao ajustar sua legenda.

üí° **Pode tentar:**
üîÑ Falar de outra forma o ajuste que quer
üìù Ou me contar exatamente como quer a legenda

‚ú® *Estou aqui para ajudar!* ‚ú®`;
  }
}

üí° **Pode tentar:**
üîÑ Falar de outra forma o ajuste que quer
üìù Ou me contar exatamente como quer a legenda

‚ú® *Estou aqui para ajudar!* ‚ú®`;
  }
}

async function processarAudio(audioUrl) {
  try {
    console.log('üéµ Baixando √°udio:', audioUrl);
    console.log('üïê In√≠cio download:', new Date().toISOString());
    
    const audioResponse = await axios.get(audioUrl, {
      responseType: 'arraybuffer',
      timeout: 10000
    });
    
    console.log('‚úÖ √Åudio baixado!');
    console.log('üìä Tamanho do arquivo:', audioResponse.data.byteLength, 'bytes');
    console.log('üïê Fim download:', new Date().toISOString());
    
    console.log('üéµ Enviando para OpenAI Whisper...');
    console.log('üïê In√≠cio Whisper:', new Date().toISOString());
    
    const fs = require('fs');
    const path = require('path');
    const tempPath = path.join('/tmp', `audio_${Date.now()}.ogg`);
    
    fs.writeFileSync(tempPath, Buffer.from(audioResponse.data));
    console.log('üìÅ Arquivo salvo em:', tempPath);
    
    const audioStream = fs.createReadStream(tempPath);
    
    const transcription = await openai.audio.transcriptions.create({
      file: audioStream,
      model: 'whisper-1',
      language: 'pt'
    });
    
    fs.unlinkSync(tempPath);
    console.log('üóëÔ∏è Arquivo tempor√°rio removido');
    
    console.log('üïê Fim Whisper:', new Date().toISOString());
    console.log('‚úÖ Texto transcrito:', transcription.text);
    return transcription.text;
  } catch (error) {
    console.log('üïê Erro em:', new Date().toISOString());
    console.error('‚ùå Erro detalhado:', {
      message: error.message,
      code: error.code,
      status: error.status
    });
    return null;
  }
}

// Rota de teste
app.get('/', (req, res) => {
  res.json({ 
    message: 'Luke Stories V13 API funcionando!',
    status: 'online',
    timestamp: new Date().toISOString(),
    versao: '13.0',
    sistema_interativo: 'ativo'
  });
});

// Teste simples do banco
app.get('/test-simple', async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('usuarios')
      .select('id')
      .limit(1);
    
    res.json({ 
      message: 'Banco funcionando!',
      conexao: error ? 'erro' : 'sucesso',
      erro: error?.message || null
    });
  } catch (error) {
    res.json({ 
      message: 'Erro capturado',
      erro: error.message 
    });
  }
});

// Webhook Ticto - INTEGRA√á√ÉO COM PAGAMENTO E SEGURAN√áA
app.post('/webhook/ticto', async (req, res) => {
  try {
    console.log('üí∞ Webhook Ticto recebido:', req.body);
    
    // VALIDAR TOKEN DE SEGURAN√áA TICTO
    const tokenRecebido = req.headers['x-ticto-token'] || req.body.token || req.headers.authorization;
    const tokenEsperado = 'r8DC0BxIsRI2R22zaDcMheURjgzhKXhcRjpa74Lugt39ftl2vir5qtMLwN5zM286B4ApVfYNFHrPylcnSylY7JF9VLF2WJbOvwp4';
    
    if (!tokenRecebido || tokenRecebido !== tokenEsperado) {
      console.error('‚ùå Token inv√°lido ou n√£o fornecido');
      console.error('Token recebido:', tokenRecebido);
      return res.status(401).json({ error: 'Token de autentica√ß√£o inv√°lido' });
    }
    
    console.log('‚úÖ Token Ticto validado com sucesso');
    
    const { email, nome, valor, status, customer, phone } = req.body;
    
    // Extrair telefone do formato da Ticto
    let telefone = null;
    
    if (req.body.telefone) {
      // Formato direto
      telefone = req.body.telefone;
    } else if (phone && phone.number) {
      // Formato da Ticto: phone: { ddd: "999", ddi: "+55", number: "99568246" }
      telefone = `55${phone.ddd}${phone.number}`;
    } else if (customer && customer.phone) {
      // Outro formato poss√≠vel
      telefone = customer.phone;
    }
    
    console.log('üìû Telefone extra√≠do:', telefone);
    
    if (!telefone) {
      console.error('‚ùå Telefone n√£o encontrado no webhook Ticto');
      console.error('Dados recebidos:', JSON.stringify(req.body, null, 2));
      return res.status(400).json({ error: 'Telefone obrigat√≥rio' });
    }
    
    // Verificar se o pagamento foi aprovado
    if (status !== 'approved' && status !== 'paid') {
      console.log(`‚è≥ Pagamento pendente ou rejeitado. Status: ${status}`);
      return res.status(200).json({ 
        status: 'received',
        message: 'Aguardando confirma√ß√£o do pagamento'
      });
    }
    
    // Ajustar n√∫mero se necess√°rio
    let telefoneAjustado = telefone;
    if (telefone.length === 12 && telefone.startsWith('5562')) {
      telefoneAjustado = telefone.substr(0, 4) + '9' + telefone.substr(4);
    }
    
    console.log(`üí≥ Pagamento APROVADO para: ${telefoneAjustado}`);
    console.log(`üí∞ Valor: R$ ${valor}`);
    
    // Verificar se usu√°rio j√° existe
    let usuario = await buscarUsuario(telefoneAjustado);
    
    if (usuario) {
      // Usu√°rio j√° existe - atualizar status de pagamento
      await supabase.from('usuarios')
        .update({ 
          status: 'pago',
          email: email,
          data_expiracao: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 dias
          data_pagamento: new Date(),
          valor_pago: valor
        })
        .eq('telefone', telefoneAjustado);
      
      console.log('‚úÖ Usu√°rio existente atualizado para status PAGO');
    } else {
      // Usu√°rio novo - criar no banco
      await supabase.from('usuarios').insert({
        telefone: telefoneAjustado,
        email: email,
        status: 'pago',
        created_at: new Date(),
        data_expiracao: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 dias
        data_pagamento: new Date(),
        valor_pago: valor
      });
      
      console.log('‚úÖ Novo usu√°rio criado com status PAGO');
    }
    
    // Enviar mensagem de boas-vindas
    const mensagemBoasVindas = `üéâ *Ol√°! Eu sou o Luke Stories!*

Seu assistente pessoal para criar textos e ideias que v√£o te ajudar a gravar conte√∫dos incr√≠veis e fazer sua imagem pessoal e empresa crescerem! üöÄ

üìã *ANTES DE COME√áAR:*
Preciso de algumas informa√ß√µes importantes:

üîπ *Como gostaria de ser chamado(a)?*
üîπ *Qual sua profiss√£o e especialidade?*
üîπ *Que servi√ßos voc√™ oferece?*
üîπ *Tem empresa/neg√≥cio? Qual o nome?*

üì± *COMO USAR O LUKE STORIES:*

üè† *Em casa:* "Preciso de um texto pra gravar aqui em casa agora, de forma animada e motivacional"

üõçÔ∏è *No shopping:* "Estou no shopping comprando um rel√≥gio, quero uma ideia curta e espont√¢nea"

üí° *Para dicas:* "Quero gravar uma dica sobre [seu assunto]"

‚ú® *Pode mandar por √ÅUDIO ou TEXTO* - eu entendo tudo!

Vamos come√ßar? Me mande suas informa√ß√µes! üòä`;

    // Enviar via Z-API
    const ZAPI_URL = `https://api.z-api.io/instances/${process.env.ZAPI_INSTANCE}/token/${process.env.ZAPI_TOKEN}`;
    
    await axios.post(`${ZAPI_URL}/send-text`, {
      phone: telefoneAjustado,
      message: mensagemBoasVindas
    }, {
      headers: {
        'Client-Token': process.env.ZAPI_CLIENT_TOKEN
      }
    });
    
    console.log('‚úÖ Mensagem de boas-vindas enviada para:', telefoneAjustado);
    
    res.status(200).json({ 
      status: 'success',
      message: 'Usu√°rio ativado e mensagem enviada'
    });
    
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Webhook Z-API - VERS√ÉO COM MEM√ìRIA INTELIGENTE
app.post('/webhook/zapi', async (req, res) => {
  try {
    console.log('üîî === WEBHOOK Z-API RECEBIDO ===');
    console.log('üì± Body:', JSON.stringify(req.body, null, 2));
    
    const webhook = req.body;
    
    // Z-API formato: verificar se √© mensagem recebida
    if (!webhook.fromMe && webhook.phone) {
      let telefone = webhook.phone;
      
      console.log(`üìû Telefone original: ${telefone}`);
      
      // Ajustar n√∫mero adicionando 9 se necess√°rio
      if (telefone.length === 12 && telefone.startsWith('5562')) {
        telefone = telefone.substr(0, 4) + '9' + telefone.substr(4);
        console.log(`üìû Telefone ajustado: ${telefone}`);
      }
      
      let mensagem = '';
      let resposta = '';
      
      // Verificar tipo de m√≠dia recebida
      if (webhook.image?.imageUrl) {
        console.log('üì∏ IMAGEM RECEBIDA!');
        console.log('üì∏ URL:', webhook.image.imageUrl);
        
        // PRIMEIRO: Buscar usu√°rio
        const usuario = await buscarUsuario(telefone);
        
        if (!usuario || usuario.status !== 'pago') {
          resposta = `üîí *Acesso restrito!*

Para usar o Luke Stories, voc√™ precisa adquirir o acesso primeiro.

üí≥ *Fa√ßa seu pagamento em:* 
https://payment.ticto.app/O6D37000C

Ap√≥s o pagamento, voc√™ receber√° acesso imediato! ‚ú®`;

          // Enviar resposta
          const ZAPI_URL = `https://api.z-api.io/instances/${process.env.ZAPI_INSTANCE}/token/${process.env.ZAPI_TOKEN}`;
          
          await axios.post(`${ZAPI_URL}/send-text`, {
            phone: telefone,
            message: resposta
          }, {
            headers: {
              'Client-Token': process.env.ZAPI_CLIENT_TOKEN
            }
          });
          
          console.log('‚úÖ Resposta de acesso restrito enviada');
          return res.status(200).json({ status: 'access_denied' });
        }
        
        // Perguntar se quer criar legenda
        resposta = `üì∏ **Foto recebida!**

Voc√™ gostaria que eu criasse uma **legenda personalizada** para essa foto?

üí° **Op√ß√µes:**
üìù *"Sim, crie uma legenda"* - para legenda autom√°tica
üéØ *"Quero legenda sobre [assunto espec√≠fico]"* - para foco personalizado
‚ùå *"N√£o precisa"* - se n√£o quer legenda

Como ${usuario.profissao}, posso criar uma legenda perfeita para seu p√∫blico! ‚ú®

O que prefere? üòä`;

        // Salvar URL da imagem temporariamente no usu√°rio
        await supabase.from('usuarios')
          .update({ 
            imagem_pendente: webhook.image.imageUrl,
            aguardando_confirmacao_imagem: true,
            updated_at: new Date()
          })
          .eq('telefone', telefone);

        // Enviar resposta
        const ZAPI_URL = `https://api.z-api.io/instances/${process.env.ZAPI_INSTANCE}/token/${process.env.ZAPI_TOKEN}`;
        
        await axios.post(`${ZAPI_URL}/send-text`, {
          phone: telefone,
          message: resposta
        }, {
          headers: {
            'Client-Token': process.env.ZAPI_CLIENT_TOKEN
          }
        });
        
        console.log('‚úÖ Pergunta sobre legenda enviada');
        return res.status(200).json({ status: 'image_confirmation_sent' });
      }
      
      if (webhook.video || webhook.document || webhook.sticker) {
        console.log('üì∏ M√≠dia n√£o suportada recebida');
        
        // Resposta educada para m√≠dias n√£o suportadas
        resposta = `Oi! üòä

Infelizmente, n√£o consigo processar v√≠deos ou documentos. 

‚úÖ **Posso ajudar com:**
üó£Ô∏è Mensagens de texto
üé§ Mensagens de √°udio
üì∏ **Fotos** (crio legendas personalizadas!)

üí¨ *Mande sua solicita√ß√£o por texto, √°udio ou foto que eu crio conte√∫do incr√≠vel para voc√™!* ‚ú®`;

        // Enviar resposta
        const ZAPI_URL = `https://api.z-api.io/instances/${process.env.ZAPI_INSTANCE}/token/${process.env.ZAPI_TOKEN}`;
        
        await axios.post(`${ZAPI_URL}/send-text`, {
          phone: telefone,
          message: resposta
        }, {
          headers: {
            'Client-Token': process.env.ZAPI_CLIENT_TOKEN
          }
        });
        
        console.log('‚úÖ Resposta sobre m√≠dia n√£o suportada enviada');
        return res.status(200).json({ status: 'media_not_supported' });
      }
      
      // Verificar se √© √°udio ou texto
      if (webhook.audio?.audioUrl) {
        console.log('üéµ √ÅUDIO RECEBIDO!');
        console.log('üéµ URL:', webhook.audio.audioUrl);
        console.log('üéµ Dura√ß√£o:', webhook.audio.seconds, 'segundos');
        
        // Processar √°udio para texto
        const textoTranscrito = await processarAudio(webhook.audio.audioUrl);
        
        if (textoTranscrito) {
          mensagem = textoTranscrito;
          console.log(`üí¨ √Åudio transcrito: "${mensagem}"`);
        } else {
          mensagem = 'N√£o consegui entender o √°udio. Pode digitar ou mandar outro √°udio?';
          console.log('‚ùå Falha na transcri√ß√£o');
        }
      } else {
        mensagem = webhook.text?.message || 'Mensagem sem texto';
      }

      console.log(`üí¨ Mensagem recebida: "${mensagem}"`);
      
      // SISTEMA DE CONVERSA POR ETAPAS
      console.log('üß† Verificando se usu√°rio existe...');
      resposta = await processarConversaEtapas(telefone, mensagem);
      
      console.log('‚úÖ Resposta preparada, enviando...');
      console.log('üì§ Enviando resposta via Z-API...');
      
      // Enviar resposta
      const ZAPI_URL = `https://api.z-api.io/instances/${process.env.ZAPI_INSTANCE}/token/${process.env.ZAPI_TOKEN}`;
      
      try {
        const response = await axios.post(`${ZAPI_URL}/send-text`, {
          phone: telefone,
          message: resposta
        }, {
          headers: {
            'Client-Token': process.env.ZAPI_CLIENT_TOKEN
          }
        });
        
        console.log('‚úÖ SUCESSO! Mensagem enviada:', response.data);
      } catch (apiError) {
        console.error('‚ùå Erro Z-API:', apiError.response?.data || apiError.message);
        console.error('‚ùå Status Code:', apiError.response?.status);
        console.error('‚ùå Response Headers:', apiError.response?.headers);
      }
    } else {
      console.log('üö´ Mensagem ignorada (fromMe ou sem phone)');
    }
    
    res.status(200).json({ status: 'processed' });
  } catch (error) {
    console.error('üí• Erro geral:', error);
    res.status(500).json({ error: error.message });
  }
});

app.listen(PORT, () => {
  console.log(`üöÄ Servidor Luke Stories V13 rodando na porta ${PORT}`);
  console.log('üì± Webhook Z-API: /webhook/zapi');
  console.log('üí∞ Webhook Ticto: /webhook/ticto');
  console.log('‚úÖ Supabase configurado!');
  console.log('ü§ñ OpenAI configurado!');
  console.log('üéØ Sistema interativo ATIVO!');
  console.log('üî• BOT PRONTO PARA FUNCIONAR!');
});
